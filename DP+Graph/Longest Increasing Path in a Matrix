Approach:



Code:
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        vector<vector<int>>memo(matrix.size(),vector<int>(matrix[0].size(),0));
        int Max=0;
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[0].size();j++)
            {
                Max = max(Max,lip(matrix,i,j,memo));
            }
        }
        return Max;
    }
    int lip(vector<vector<int>>& matrix, int i, int j, vector<vector<int>>& memo)
    {
        if(i<0 || i>=matrix.size() || j<0 || j>=matrix[0].size())
        {
            return 0;
        }
        if(memo[i][j]>0)
        {
            return memo[i][j];
        }
        int currmax=1;
        // down neighbour
        if(i+1<matrix.size() && i+1>=0 && matrix[i+1][j]>matrix[i][j])
        {
            currmax=max(currmax,1+lip(matrix,i+1,j,memo));
        }
        // right neighbour
        if(j+1<matrix[0].size() && j+1>=0 && matrix[i][j+1]>matrix[i][j])
        {
            currmax=max(currmax,1+lip(matrix,i,j+1,memo));
        }
        //left neighbour
        if(j-1<matrix[0].size() && j-1>=0 && matrix[i][j-1]>matrix[i][j])
        {
            currmax=max(currmax,1+lip(matrix,i,j-1,memo));
        }
        // top neighbour 
        if(i-1<matrix.size() && i-1>=0 && matrix[i-1][j]>matrix[i][j])
        {
            currmax=max(currmax,1+lip(matrix,i-1,j,memo));
        }
        memo[i][j]=currmax;
        return currmax;
    }
    
};
