Approach:
We will use map to keep track of no. of unique elements. if it is less than k, we will keep incrementing j. if it is equal to k, we will store it in ans variable. if it is greater than k, then start removing s[i] and keep incrementing i. this process goes on till map size comes down to k. 
At the end ans will give the answer. 



class Solution{
  public:
    int longestKSubstr(string s, int k) {
    // your code here
    int i=0;
    int j=0;
    int n = s.length();
    unordered_map <char,int> mp;
    int mx=0;
    while(j<n)
    {
        mp[s[j]]++;
        if (mp.size()==k)
        {
            mx=max(mx,j-i+1);
            j++;
        }
        else if (mp.size()<k)
        {
            j++;
        }
        else if (mp.size()>k)
        {
            while(mp.size()>k)
            {
                mp[s[i]]--;
                if (mp[s[i]]==0)
                {
                    mp.erase(s[i]);
                }
                i++;
            }
            j++;
        }
        
    }
    if(mx==0)
    {
        return -1;
    }
    return mx;
    }
};
