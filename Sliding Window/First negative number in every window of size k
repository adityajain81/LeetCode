
Approach:
We will use queue to keep track of negative elements in a window. we will push q.front() in vector ans. Whenever we will shift the window we can remove A[i] if it is negative. We can push A[j] to queue if it is negative. this process goes on until we reach end of the array.

#define ll long long int
vector<long long> printFirstNegativeInteger(long long int A[],
                                             long long int N, long long int K) {
    queue <ll> q;
    ll i=0;
    ll j=0;
    vector <ll> v;
    while(j<N)
    {
        if(A[j]<0)
        {
            q.push(A[j]);
        }
        if (j-i+1==K)
        {
            if(!q.empty())
            {
                v.push_back(q.front());
            }
            else 
            {
                v.push_back(0);
            }
            if(A[i]==q.front())
            {
                q.pop();
            }
            i++;
            j++;
        }
        if(j-i+1<K)
        {
            j++;
        }
        
    }
    return v;
 }
