Approach:
Monotonic Queue
Queue data structure with either increasing elements or decreasing elements.
Increasing Monotonic Queue 
Decreasing Monotonic Queue 

In each sliding window, we will push elements in decreasing monotonic Queue. For each sliding window we will push Q.front() to the answer vector. Window get slided by i++ and j++.




class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector <int> ans;
        int i=0;
        int j=0;
        int n = nums.size();
        deque<int> q;
        while(j<n)
        {
            if(q.empty())
            {
                q.push_back(nums[j]);
            }
            else 
            {
                while(!q.empty() && q.back()<nums[j])
                {
                    q.pop_back();
                }
                q.push_back(nums[j]);
            }
            
            if (j-i+1<k)
            {
                j++;
            }
            else if (j-i+1==k)
            {
                ans.push_back(q.front());
                if (nums[i]==q.front())
                {
                    q.pop_front();
                }
                i++;
                j++;
            }
        }
        return ans;
    }
};
