Approach:


Code:
class Solution {
private:
    bool force(vector<int>& position, int m, int n, int dis)
    {
        m--;
        int prev = position[0];
        while(m--)
        {
            if(lower_bound(position.begin(),position.end(),dis+prev)-position.begin()!=n)
            {
                prev = position[lower_bound(position.begin(),position.end(),dis+prev)-position.begin()];
            }
            else 
            {
                return false;
            }
        }
        return true;
    }
public:
    int maxDistance(vector<int>& position, int m) {
        sort(position.begin(),position.end());
        int n = position.size();
        int lo = 1;
        int hi = position[n-1]-position[0];
        while(lo<=hi)
        {
            int mid = lo + (hi-lo)/2;
            if(force(position,m,n,mid))
            {
                lo = mid+1;
            }
            else
            {
                hi = mid-1;
            }
        }
        return lo-1;
    }
};
