Approach 1 
iterative way
We will make two Listnode pointer, prev and node1. first prev will point to nullptr. node1 will be created with data of first node. node1 will be pointed to prev. prev will be pointed to node1. node1 will be created with data of next node. the above approach will run in loop until we reach the end of linked list.




Approach 2 
Recursive way
It is little bit complex
the Recursive function will return last node of the linked list pointing to null. In the Recursive function, we will point node 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (head==NULL||head->next==NULL)
        {
            return head;
        }
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* forward = curr->next;
        while(curr!=NULL)
        {
            forward = curr->next;
            curr->next = prev;
            prev = curr;
            curr = forward;
        }
        return prev;
    }
};
